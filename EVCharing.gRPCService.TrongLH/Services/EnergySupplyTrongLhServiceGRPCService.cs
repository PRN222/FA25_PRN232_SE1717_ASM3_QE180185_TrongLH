using System.Text.Json;
using System.Text.Json.Serialization;
using EVCharging.Services.TrongLH.Interfaces;
using Grpc.Core;

namespace EVCharing.gRPCService.TrongLH.Services;

public class EnergySupplyTrongLhServiceGrpcService(
    ILogger<EnergySupplyTrongLhServiceGrpcService> logger,
    IServiceProviders service)
    : EnergySupplyTrongLhGRPC.EnergySupplyTrongLhGRPCBase
{
    private readonly ILogger<EnergySupplyTrongLhServiceGrpcService> _logger = logger;
    private readonly IServiceProviders _service = service;

    public override async Task<EnergySupplyTrongLhListList> GetAllAsync(EmptyRequest request, ServerCallContext context)
    {
        try
        {
            var energySupplies = await _service.EnergySupplyTrongLhService.GetAllAsync();
            var result = new EnergySupplyTrongLhListList();

            foreach (var item in energySupplies)
            {
                result.EnergySupplies.Add(new EnergySupplyTrongLh
                {
                    EnergySupplyTrongLhid = item.EnergySupplyTrongLhid ?? 0,
                    StationTrongLhid = item.StationTrongLhid,
                    SupplyType = item.SupplyType ?? string.Empty,
                    CapacityKw = (double)(item.CapacityKw ?? 0),
                    AvailableKw = (double)(item.AvailableKw ?? 0),
                    SourceName = item.SourceName ?? string.Empty,
                    StartDate = item.StartDate?.ToString("yyyy-MM-dd") ?? string.Empty,
                    ContractNumber = item.ContractNumber ?? string.Empty,
                    IsRenewable = item.IsRenewable,
                    PeakCapacity = (double)(item.PeakCapacity ?? 0),
                    EfficiencyRate = (double)(item.EfficiencyRate ?? 0),
                    CreatedAt = item.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")
                });
            }

            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error in GetAllAsync");
            throw new RpcException(new Status(StatusCode.Internal, "Internal server error"));
        }
    }

    public override async Task<EnergySupplyTrongLh> GetByIdAsync(IdRequest request, ServerCallContext context)
    {
        try
        {
            var energySupply = await _service.EnergySupplyTrongLhService.GetByIdAsync(request.Id);

            if (energySupply == null)
                return new EnergySupplyTrongLh();

            return new EnergySupplyTrongLh
            {
                EnergySupplyTrongLhid = energySupply.EnergySupplyTrongLhid ?? 0,
                StationTrongLhid = energySupply.StationTrongLhid,
                SupplyType = energySupply.SupplyType ?? string.Empty,
                CapacityKw = (double)(energySupply.CapacityKw ?? 0),
                AvailableKw = (double)(energySupply.AvailableKw ?? 0),
                SourceName = energySupply.SourceName ?? string.Empty,
                StartDate = energySupply.StartDate?.ToString("yyyy-MM-dd") ?? string.Empty,
                ContractNumber = energySupply.ContractNumber ?? string.Empty,
                IsRenewable = energySupply.IsRenewable,
                PeakCapacity = (double)(energySupply.PeakCapacity ?? 0),
                EfficiencyRate = (double)(energySupply.EfficiencyRate ?? 0),
                CreatedAt = energySupply.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error in GetByIdAsync");
            throw new RpcException(new Status(StatusCode.Internal, "Internal server error"));
        }
    }

    public override async Task<MutationRelay> CreateAsync(EnergySupplyTrongLh request, ServerCallContext context)
    {
        try
        {
            // Manually map the gRPC request to the repository model
            var item = new EVCharging.Repositories.TrongLH.Models.EnergySupplyTrongLh
            {
                EnergySupplyTrongLhid = null, // Will be generated by database
                StationTrongLhid = request.StationTrongLhid,
                SupplyType = request.SupplyType,
                CapacityKw = (decimal?)request.CapacityKw,
                AvailableKw = (decimal?)request.AvailableKw,
                SourceName = request.SourceName,
                StartDate = !string.IsNullOrEmpty(request.StartDate) && DateTime.TryParse(request.StartDate, out var startDate) ? startDate : null,
                ContractNumber = request.ContractNumber,
                IsRenewable = request.IsRenewable,
                PeakCapacity = (decimal?)request.PeakCapacity,
                EfficiencyRate = (decimal?)request.EfficiencyRate,
                CreatedAt = !string.IsNullOrEmpty(request.CreatedAt) && DateTime.TryParse(request.CreatedAt, out var createdAt) ? createdAt : DateTime.Now
            };

            var createdEnergySupply = await _service.EnergySupplyTrongLhService.CreateAsync(item);
            return new MutationRelay { AffectedRows = createdEnergySupply };
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error in CreateAsync");
            throw new RpcException(new Status(StatusCode.Internal, "Internal server error"));
        }
    }

    public override async Task<MutationRelay> UpdateAsync(EnergySupplyTrongLh request, ServerCallContext context)
    {
        try
        {
            // Manually map the gRPC request to the repository model
            var item = new EVCharging.Repositories.TrongLH.Models.EnergySupplyTrongLh
            {
                EnergySupplyTrongLhid = request.EnergySupplyTrongLhid,
                StationTrongLhid = request.StationTrongLhid,
                SupplyType = request.SupplyType,
                CapacityKw = (decimal?)request.CapacityKw,
                AvailableKw = (decimal?)request.AvailableKw,
                SourceName = request.SourceName,
                StartDate = !string.IsNullOrEmpty(request.StartDate) && DateTime.TryParse(request.StartDate, out var startDate) ? startDate : null,
                ContractNumber = request.ContractNumber,
                IsRenewable = request.IsRenewable,
                PeakCapacity = (decimal?)request.PeakCapacity,
                EfficiencyRate = (decimal?)request.EfficiencyRate,
                CreatedAt = !string.IsNullOrEmpty(request.CreatedAt) && DateTime.TryParse(request.CreatedAt, out var createdAt) ? createdAt : DateTime.Now
            };

            var updatedEnergySupply = await _service.EnergySupplyTrongLhService.UpdateAsync(item);
            return new MutationRelay { AffectedRows = updatedEnergySupply };
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error in UpdateAsync");
            throw new RpcException(new Status(StatusCode.Internal, "Internal server error"));
        }
    }

    public override async Task<MutationRelay> DeleteAsync(IdRequest request, ServerCallContext context)
    {
        try
        {
            var deletedEnergySupply = await _service.EnergySupplyTrongLhService.DeleteAsync(request.Id);
            return new MutationRelay { AffectedRows = deletedEnergySupply ? 1 : 0 };
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error in DeleteAsync");
            throw new RpcException(new Status(StatusCode.Internal, "Internal server error"));
        }
    }
}